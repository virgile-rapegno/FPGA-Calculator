-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 18.0.0 Build 614 04/24/2018 SJ Lite Edition"
-- CREATED		"Tue Jan 12 09:49:06 2021"

LIBRARY ieee;
USE ieee.std_logic_1164.all;
Use ieee.numeric_std.all ;

LIBRARY work;

ENTITY CPU IS 
	PORT
	(
		MAX10_CLK1_50 :  IN  STD_LOGIC;
		SW   :  IN 	 STD_LOGIC_VECTOR(9 DOWNTO 0);
		HEX0 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		HEX1 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		HEX2 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		HEX3 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		HEX4 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		HEX5 :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0);
		LEDR :  OUT  STD_LOGIC_VECTOR(9 DOWNTO 0);
		PUSH :  IN STD_LOGIC;
		RESET:  IN STD_LOGIC
		
	);
END CPU;

ARCHITECTURE bdf_type OF CPU IS 

COMPONENT seg7_lut
	PORT(iDIG : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 oSEG : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

COMPONENT dig2dec
	PORT(vol : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 seg0 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg1 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg2 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg3 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg4 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;



COMPONENT Event_Detect
	port(
			clk			:	in std_logic;
			IN_Signal	:	in std_logic;
			Event_L2H	:	out std_logic;
			Event_H2L	:	out std_logic
			);
END COMPONENT;

COMPONENT Rom
	port(
			en			:	in std_logic;
			clk		:	in std_logic;
			rst		:	in std_logic;
			Adress	:	in std_logic_vector(7 downto 0);
			Data_out:	out std_logic_vector(3 downto 0)
			);
END COMPONENT;

COMPONENT Fetch
	PORT (
			en			:	in std_logic;
			clk		:	in std_logic;
			rst		:	in std_logic;
			PC_load	:	in std_logic;
			PC_Jump	:	in std_logic_vector(7 downto 0);
			PC_out	:	out std_logic_vector(7 downto 0)
	);
END COMPONENT;

COMPONENT register_file
	PORT(
			clk		:	in std_logic;
			rst		:	in std_logic;
			sel		:	in std_logic;
			en:	in std_logic;
			Data_in  : in std_logic_vector(7 downto 0);
			Data_out_A:	out std_logic_vector(7 downto 0);
			Data_out_B:	out std_logic_vector(7 downto 0)
	);
END COMPONENT;

COMPONENT ALU
	PORT(
			sel		:	in std_logic_vector(3 downto 0);
			clk		:	in std_logic;
			rst		:	in std_logic;
			Data_in_imm: in std_logic_vector(7 downto 0);
			Data_in_A:	in std_logic_vector(7 downto 0);
			Data_in_B:	in std_logic_vector(7 downto 0);
			Data_out :  out std_logic_vector(7 downto 0)
	);
END COMPONENT;




SIGNAL	zero :  STD_LOGIC;
SIGNAL	one :  STD_LOGIC;
SIGNAL	HEX_out0 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	HEX_out1 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	HEX_out2 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	HEX_out3 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	HEX_out4 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	seg7_in0 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	seg7_in1 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	seg7_in2 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	seg7_in3 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	seg7_in4 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	seg7_in5 :  STD_LOGIC_VECTOR(7 DOWNTO 0);



SIGNAL 	data_to_register		: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL 	dataA_from_register	: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL 	dataB_from_register	: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	instruction				: STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	adress_fetch			: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	changer_instruction	: STD_LOGIC;
SIGNAL	save						: STD_LOGIC;



BEGIN 


Event_Detect_inst : Event_Detect
PORT MAP(
	clk			=> MAX10_CLK1_50,
	IN_Signal	=> PUSH,
	Event_H2L	=> save,
	Event_L2H	=>	changer_instruction
	);

rom_inst : Rom
	port MAP(
	en			=> changer_instruction,
	clk		=> MAX10_CLK1_50,
	rst		=> RESET,
	Adress	=> adress_fetch,
	Data_out	=> instruction
	);
	
fetch_inst : Fetch
	PORT MAP(
	en			=> changer_instruction,
	clk		=> MAX10_CLK1_50,
	rst		=> RESET,
	PC_load	=> zero,
	PC_jump	=> "00000000",
	PC_out	=> adress_fetch
	);

register_file_inst : register_file
PORT MAP(
	clk			=> MAX10_CLK1_50,
	rst			=> RESET,
	sel			=> instruction(3),
	en				=> save,
	Data_in  	=> data_to_register,
	Data_out_A	=> dataA_from_register,
	Data_out_B 	=> dataB_from_register
	);	

			
alu_inst : ALU
PORT MAP(
	sel			=>	instruction,
	clk			=> MAX10_CLK1_50,
	rst			=>	RESET,
	Data_in_imm => SW(7 downto 0),
	Data_in_A 	=>	dataA_from_register,
	Data_in_B 	=>	dataB_from_register,
	Data_out 	=> data_to_register
	);
	
	


			
			

b2v_inst : seg7_lut
PORT MAP(iDIG => seg7_in0,
		 oSEG => HEX_out4(6 DOWNTO 0));


b2v_inst1 : seg7_lut
PORT MAP(iDIG => seg7_in1,
		 oSEG => HEX_out3(6 DOWNTO 0));


b2v_inst2 : seg7_lut
PORT MAP(iDIG => seg7_in2,
		 oSEG => HEX_out2(6 DOWNTO 0));


b2v_inst3 : seg7_lut
PORT MAP(iDIG => seg7_in3,
		 oSEG => HEX_out1(6 DOWNTO 0));


b2v_inst4 : seg7_lut
PORT MAP(iDIG => seg7_in4,
		 oSEG => HEX_out0(6 DOWNTO 0));


b2v_inst5 : dig2dec
PORT MAP(	vol => "0000000000000000", --& dataA_from_register,
		 seg0 => seg7_in4,
		 seg1 => seg7_in3,
		 seg2 => seg7_in2,
		 seg3 => seg7_in1,
		 seg4 => seg7_in0);



HEX0 <= HEX_out0;
HEX1 <= HEX_out1;
HEX2 <= HEX_out2;
HEX3 <= HEX_out3;
HEX4 <= HEX_out4;
HEX5(7) <= one;
HEX5(6) <= one;
HEX5(5) <= one;
HEX5(4) <= one;
HEX5(3) <= one;
HEX5(2) <= one;
HEX5(1) <= one;
HEX5(0) <= one;

zero <= '0';
one <= '1';
HEX_out0(7) <= '1';
HEX_out1(7) <= '1';
HEX_out2(7) <= '1';
HEX_out3(7) <= '1';
HEX_out4(7) <= '1';



LEDR <= SW;

END architecture;